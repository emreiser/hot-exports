<link type="text/css" rel="stylesheet" href="<%= asset_path 'leaflet-0.7.2/leaflet.css' %>"></script>
<script type="text/javascript" src="<%= asset_path 'leaflet-0.7.2/leaflet.js' %>"></script>

<link type="text/css" rel="stylesheet" href="<%= asset_path 'leaflet-draw-0.2.4/leaflet.draw.css' %>"></script>
<script type="text/javascript" src="<%= asset_path 'leaflet-draw-0.2.4/leaflet.draw.js' %>"></script>

<script type="text/javascript" src="<%= asset_path 'leaflet-omnivore/leaflet-omnivore.min.js' %>"></script>

<script type="text/javascript">
$(document).ready(function() {

   // map
   var map;
   var mapnik_layer;
   var regions_layer;
   var check_layer;

   var vectors;
   var box;

   var mapMessage = "";

   init_map();

   $(".select_area").click(function(e) {
      e.preventDefault();//dont jump to top of page
      init_drawfeature();
      start_drawfeature();
   });

   $(".latlon").change(function() {
      init_drawfeature();
      values2box();
//box.deactivate();
//transform.deactivate();
   });


<% if @job.id.nil? %>
<% else %>
   // XXX check for "newwithconfiguration"
   init_drawfeature();
   box.deactivate();
   transform.deactivate();
   init_values2box();
<% end %>


function init_map(){
   map = new L.Map("map");
   $('.leaflet-control-attribution').html('Data &copy; 2014 OpenStreetMap contributors');

   mapnik_layer = L.tileLayer('http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png');
   map.addLayer(mapnik_layer);


   regions_layer = omnivore.kml('/kml/loch.kml').addTo(map);
   regions_layer.on('ready', function() {
     regions_layer.setStyle(function(feature){
       return { fillOpacity: 0.3, fillColor: "#f00", color: "#f00", weight: 2, clickable: false, pointerEvents: null };
     });
   });

   // check_layer is not an actual visual layer?
   // appears to be areas which are ok to downlaod
   check_layer = omnivore.kml('/kml/check.kml');

<% if @job.id.nil? %>
   map.setView(new L.LatLng(0,0), 1);
<% else %>

   extent = new L.LatLngBounds(
     new L.LatLng(<%= @job.latmin %>, <%= @job.lonmin %>),
     new L.LatLng(<%= @job.lonmax %>, <%= @job.latmax %>)
   );
   //map.zoomToExtent(extent.scale(2))
<% end %>


   updateMapMessage('<%=t('jobs.area.no_area_selected')%>');
}

function init_drawfeature() {


   if (vectors) {
     vectors.clearLayers();
   }
   else{
     vectors = new L.FeatureGroup();
     map.addLayer(vectors);
   }

   box = new L.Control.Draw({
     draw: {
       polyline: false,
       polygon: false,
       circle: false,
       marker: false
     },
     edit: {
       featureGroup: vectors
     }
   });
   map.addControl(box);
   map.on('draw:created', draw_end);
}

function start_drawfeature() {
   //box.activate();
   updateMapMessage('<%=t('jobs.area.drag_to_select')%>');
   $("p#select_area").css({"visibility":"hidden"});
}

function transformComplete(event) {
   set_bounds(event.feature.geometry.bounds);
}

function draw_end(bbox) {
   bounds = bbox.layer; //bbox.getBounds();
   draw_box(bounds);
   set_bounds(bounds.getBounds());
   //box.deactivate();
   $("p#select_area").css({"visibility":"visible"});
}

function draw_box(bounds) {
  vectors.clearLayers();
  vectors.addLayer(bounds);
}


function set_bounds(bounds) {

   if (!check_bounds(bounds)) {
      return false;
   }

   z = 10000;

   var left    = Math.round(bounds.left   * z) / z;
   var bottom  = Math.round(bounds.bottom * z) / z;
   var right   = Math.round(bounds.right  * z) / z;
   var top     = Math.round(bounds.top    * z) / z;

   $("#job_lonmin").val(left);
   $("#job_latmin").val(bottom);
   $("#job_lonmax").val(right);
   $("#job_latmax").val(top);
   $("form").resetClientSideValidations();
}

function init_values2box() {

   <% unless @job.id.nil? %>
   xminlon = <%= @job.lonmin %>;
   xminlat = <%= @job.latmin %>;
   xmaxlon = <%= @job.lonmax %>;
   xmaxlat = <%= @job.latmax %>;

   bounds = new L.LatLngBounds(
     new L.LatLng(xminlat, xminlon),
     new L.LatLng(xmaxlat, xmaxlon)
   );
   draw_box(bounds);
   <% end %>
}

function values2box() {

   xminlon = $("#job_lonmin").val();
   xminlat = $("#job_latmin").val();
   xmaxlon = $("#job_lonmax").val();
   xmaxlat = $("#job_latmax").val();

   bounds = new L.LatLngBounds(
     new L.LatLng(xminlat, xminlon),
     new L.LatLng(xmaxlat, xmaxlon)
   );
   draw_box(bounds);
   $("form").resetClientSideValidations();
}

function check_bounds(bounds) {

   var poly = bounds.toGeometry();
   //var covered_region = check_layer.features[0].geometry.intersects(poly);

   var max_bounds_area = <%= @max_bounds_area.to_s %>;
   var area = bounds.getArea();

   $("a.select_area").text('<%=t('jobs.area.select_different') %>');

   if (!covered_region) {
      //Area is out of the covered regions
      updateMapMessage('<span class="error"><%= t('jobs.errors.area_not_covered') %></span>');
      return false;
   } else if (area > max_bounds_area) {
      //Area is too large
      updateMapMessage('<span class="error"><%= t('jobs.errors.area_too_large') %>' + parseInt(area) + '<%= t('jobs.errors.bb_only_allowed', :bbox_max => @max_bounds_area.to_s) %></span>');
      return false;
   } else {
      //All ok
      updateMapMessage('&nbsp;');
      return true;
   }
}

function updateMapMessage(msg) {
   mapMessage = msg
   $("#mapmessage").html(mapMessage);
}

$("form#new_job").submit(function() {
   //Extra validation, in addition to the standard stuff from the
   //validation plugin.
   if (mapMessage!="" && mapMessage!="&nbsp;") {
      alert( mapMessage );
      return false
   } else {
      return true;
   }
});

});
</script>

<div class="wizard">
   <h1><%= @h1 %></h1>

   <%= form_for @job, :validate => true,
                      :url => { :action => @action }  do |f| %>

   <%= hidden_field_tag(:old_job_id, @job.id) %>
   <%= render 'shared/error_messages' %>

<!--
      <tr>
         <th><%= f.label :region, t('jobs.th.region') %></th>
         <th><%= collection_select(:job, :region_id, Region.all, :id, :name, {}, {:class => 'change_project'}) %></th>
      </tr>
//-->
    <div>
      <%= f.label :name, t('jobs.th.name') %>
      <%= f.text_field :name, :style => "width: 320px;" %>
    </div>
    <div>
      <%= f.label :description, t('jobs.th.description') %>
      <%= f.text_area :description, :style => "width: 500px;" %>
    </div>
    <div>
      <%= f.label :preset, t('jobs.th.preset') %>
      <select>
        <option>presets</option>
      </select>
    </div>
    <div>
      <%= f.label :preset, t('jobs.th.translate') %>
      <select>
        <option>translations</option>
      </select>
    </div>
    <div>
      <%= f.label :preset, t('jobs.th.transform') %>
      <select>
        <option>tag transforms</option>
      </select>
    </div>
    <div>
      <div id="mapmessage">&nsbp;</div>
      <img src="/assets/Pointer.png" style="width:20px;" class="select_area"/>
      <a href="#" class="select_area">
        <%= t 'jobs.action.select_area' %>
      </a>

      <%= f.hidden_field(:lonmin) %>
      <%= f.hidden_field(:latmin) %>
      <%= f.hidden_field(:lonmax) %>
      <%= f.hidden_field(:latmax) %>
   </div>
   <div style="text-align:center;">
      <%= f.submit t('jobs.button.createjob'), :class=>'submit' %>
   </div>

   <% end %>
</div>

<div id="map"></div>
